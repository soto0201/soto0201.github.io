<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Soto&#39;s blog</title>
  
  
  <link href="https://soto0201.github.io/atom.xml" rel="self"/>
  
  <link href="https://soto0201.github.io/"/>
  <updated>2024-02-28T12:30:21.785Z</updated>
  <id>https://soto0201.github.io/</id>
  
  <author>
    <name>soto</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年の振り返り</title>
    <link href="https://soto0201.github.io/other/184f9a342e67/"/>
    <id>https://soto0201.github.io/other/184f9a342e67/</id>
    <published>2023-12-31T13:02:15.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大晦日なので1年を振り返る"><a href="#大晦日なので1年を振り返る" class="headerlink" title="大晦日なので1年を振り返る"></a>大晦日なので1年を振り返る</h1><p>年の振り返りの記事を書くぞ</p><p>今年の抱負は死なない事でした。達成できて満足です。来年も継続したいですね。</p><h2 id="修士卒業編-1月-3月"><a href="#修士卒業編-1月-3月" class="headerlink" title="修士卒業編　1月~3月"></a>修士卒業編　1月~3月</h2><p>この時期は修士卒業するために言葉通り必死でした。</p><p>そして修士認定に潜む多数の落とし穴と事務へ向く怒り。<br>しかしこの件について、ここに記すには余白が狭すぎる。</p><p>あと修士論文の製本をしたがそこそこ大変だった。<br>製本にはなぜかサンプル用に一冊用意しろという謎の要求があったため、それならそのまま印刷して製本するほうが安上がりだよなという結論になった。ただ、人数分の上質紙を買って印刷するのはそこそこ大変だった。<br>(2000枚＋予備ほど用意したが、店にある上質紙を全て買っても足りなかったので何軒か文具店を回った)<br>これでかなり金額が安くなったし、割引して材料費を加味してもおつりがくるレベルだった。(そもそも業者がボり過ぎなのでは…？)<br>でもみんな製本作業手伝ってくれたのでありがたかった。牛角も美味しかった。</p><p><del>ちなみに製本を受け渡す際に差し入れを持ってきてくれたのは中国からの留学生だけだった…</del></p><h2 id="新社会人編-4月-9月"><a href="#新社会人編-4月-9月" class="headerlink" title="新社会人編　4月~9月"></a>新社会人編　4月~9月</h2><p>4月に新社会人として就職しましたが、9月いっぱいで退職しました。</p><p>そもそも修士号取ったら死んでもいいと思ってたのであまり生きる気力が無かった(これが割と問題の元凶)<br>そんな状態で仕事のモチベが出るはずも無く、仕事でミスして怒られてさらにモチベが下がる悪循環でしたね…そらそうなる(怒られない週が無いくらいだった)</p><p>ある時に趣味である過疎Vtuberの配信を観ている時に「流れ星に願いをするなら？」という話しがされていて、自分ならこれを叶えたいなーっていろいろ考えていた。 その際に自分の願望が死ぬことでは無く、仕事が辛い現状から逃げたい所にある事を自覚した。翌日退職の相談をした。</p><p>退職をする事を相談した後に、3ヶ月ほど働いていた。一般常識的にはそういうものらしい。 なので実は4月から退職の意思を伝えるよりも、その後に退職するまでの時期の方が長かった。</p><p>でも退職までの間、自分がやりたい作業を優先して振ってくれた。ありがとう社長。達者でな。</p><p>あと退職までの間の気づきとして、取れない責任は取らない事も大事だと感じた。 これまで責任の押し付け合いは悪だと思っていたが、逆で上の人と合意形成して責任を押し付けて分散させるのが正しいムーブも正しいことを理解した。(これをもっと先に理解してたら病まなかったかもしれない)<br>そもそも自分より上の立場の人間が仕様を決め、それを作るエンジニアという立場ではどう頑張っても取れない責任が存在する。例えると、エンジニアが仕様に対して忠実に成果物を作っても、その成果物で利益が絶対に保証されるというわけではないし、そこに対してエンジニアは責任をとれない(とるもんじゃない)と考えるようになった。</p><p>それでも退職までの間は本当に元気がなく、生きる事が困難だったため毎週何かを購入する事を決めて生きる為のモチベを保っていた。(実際に購入したものは少ない)</p><h2 id="退職後-10月～12月"><a href="#退職後-10月～12月" class="headerlink" title="退職後　10月～12月"></a>退職後　10月～12月</h2><p>そもそも元気がなくなっていたので、この期間は休む事が本題だった。</p><p>加えて、元々自分が何もする必要がなくなったときに、どういった行動をして、何を感じ、そして何をしたいと思うのか知りたかったという側面もあった。案外気づきが多いことに驚きがあった。</p><p>大きい点として、やっぱり働いていないと罪悪感があって外出が厳しく、自分が他人からどう見られているのか気にする事を知った(外出をあまりしたがらなくなった)。元々インドア派であるのも影響していると思う。</p><p>あとは自分がかわいいものが大好きで、そのためなら割と頑張れるってのもわかった。(前回記事のSDしかり)そもそも幼い頃からインターネットに触れていたモチベがそこにあることを思い出した。(Wi-Fiルーターが家に無かったし、両親が買ってくれなかったので、家族用ノートPCのWi-Fiモジュールを使って無線LANを受信ではなく送信するようにしていたのを思い出した)<br>たぶん性格が、お金のために働くよりも美少女のために働くほうが向いているんだろうな。</p><p>あと実は料理の勉強もしていた。最近は味の素もめんつゆと同じくかなり万能だと思っている。1番嬉しかったのは自分が求める最高の魚の味を作れた事。これは火加減と下拵えが案外難しい。次はみりん醤油に漬けたりなど、所謂「仕込み」をやってみて、もっとおいしくできるようにしたい。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>こうしてみると2023年は厄年らしい波乱の一年だった。けど乗り切ったし、学びも多くあった。<br>ただ懲り懲りではあるので、次の厄年は1年丸々休暇取る(断定)<br>来年はもっと楽しい振り返りにしたいな…</p><p>元日は今年の目標を書きたい</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大晦日なので1年を振り返る&quot;&gt;&lt;a href=&quot;#大晦日なので1年を振り返る&quot; class=&quot;headerlink&quot; title=&quot;大晦日なので1年を振り返る&quot;&gt;&lt;/a&gt;大晦日なので1年を振り返る&lt;/h1&gt;&lt;p&gt;年の振り返りの記事を書くぞ&lt;/p&gt;
&lt;p&gt;今年の抱負</summary>
      
    
    
    
    <category term="other" scheme="https://soto0201.github.io/categories/other/"/>
    
    
    <category term="Poem" scheme="https://soto0201.github.io/tags/Poem/"/>
    
  </entry>
  
  <entry>
    <title>Windows の Docker で Stable Diffusionを動作させる</title>
    <link href="https://soto0201.github.io/Windows/f3c3df7e2e79/"/>
    <id>https://soto0201.github.io/Windows/f3c3df7e2e79/</id>
    <published>2023-12-28T09:55:59.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StableDiffusionで遊んでみたい！"><a href="#StableDiffusionで遊んでみたい！" class="headerlink" title="StableDiffusionで遊んでみたい！"></a>StableDiffusionで遊んでみたい！</h1><p>ちょっとゲームを作成してみたいと前々から思っていたが、絵が描けないことがネックになっていた。ネットサーフィン(死後)をしていると、GTX1660sでもStabledifusionを動かす方法があったので、それを試してラフテルを目指す。</p><p>加えてただでさえwindows環境なので環境破壊をあまりしたくないと思っていたところ、Dockerを使って環境構築できるリポジトリを見つけたのでそれをもとに進めていった。<br><a href="https://github.com/AbdBarho/stable-diffusion-webui-docker">https://github.com/AbdBarho/stable-diffusion-webui-docker</a></p><h2 id="問題その1-謎にkilledされる"><a href="#問題その1-謎にkilledされる" class="headerlink" title="問題その1 謎にkilledされる"></a>問題その1 謎にkilledされる</h2><p>Githubのセットアップ方法をもとに進めていくと、急にkilledされてしまった。<br>最初はコンテナにGPUが割り当てられていないことを疑ったりしていたが、Dockerを動かしているWSLに割り当てているメモリ量が4GBだったことが原因だった。<br>これを10GBに変更し、swap領域も20GBほど割り当てたところ、この件は解消した。</p><p>ここを参考にして設定した。</p><ul><li><a href="https://nosubject.io/docker-desktop-memory-allocation-config/">https://nosubject.io/docker-desktop-memory-allocation-config/</a></li></ul><h2 id="問題その2-モデルがloadできない"><a href="#問題その2-モデルがloadできない" class="headerlink" title="問題その2 モデルがloadできない"></a>問題その2 モデルがloadできない</h2><p>これも最初、モデルが存在していないからこのエラーが発生していると思ったが、私の使っているGTX 1660Superというグラボではメモリ不足のためモデルがloadできなかった。<br>そのため以下を参考にして1660sでも動作するように設定を変更したところ、無事StableDiffusion Web UIが動作するようになった。</p><p>エラー文はこんな感じだった<br><code>webui-docker-auto-1  | RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument index in method wrapper_CUDA__index_select)</code></p><p>この2つを参考にした。<br>上の方が設定の変更箇所で、下の方が設定の内容とした</p><ul><li><a href="https://github.com/AbdBarho/stable-diffusion-webui-docker/wiki/Usage#customization">https://github.com/AbdBarho/stable-diffusion-webui-docker/wiki/Usage#customization</a></li><li><a href="https://banilog.com/stable-diffusion-3/#toc8">https://banilog.com/stable-diffusion-3/#toc8</a></li></ul><p>最終的に<code>stable-diffusion-webui-docker/docker-compose.yml</code>のautoのservidceが以下のようになった</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">auto:</span> <span class="meta">&amp;automatic</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLI_ARGS=--precision</span> <span class="string">full</span> <span class="string">--no-half</span> <span class="string">--opt-split-attention</span> <span class="string">--allow-code</span> <span class="string">--medvram</span> <span class="string">--xformers</span> <span class="string">--enable-insecure-extension-access</span> <span class="string">--api</span> </span><br></pre></td></tr></table></figure><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><p>これでAI絵師をいつでも名乗れるようになった。(構築しただけで名乗れるのか…)<br>使っていくうちに、upscaleを使用するとかなり解像度がよくなることがわかった。<br>これからはブログのアイコンや挿絵にAI絵を使ってみたい。</p><p>StableDiffusionに出会うのがもう少し早ければ、FPGAで高速で動作させる研究をしてたかもしれない。</p><h2 id="作った画像"><a href="#作った画像" class="headerlink" title="作った画像"></a>作った画像</h2><p>まだ触りの状態だけど今のところの最高傑作がこちら<br>かわいいね<br><img src="/images/2023/12/im2.jpg"><br>最初は指が6本になってたけど、同じ画像を生成しつつ指の数を治す方法も発見できた(seed値を固定してモデルのstep数を増やすと改善される)<br>案外奥が深くて大変だけど、生成されるイラストに癒されるのでプラマイ0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;StableDiffusionで遊んでみたい！&quot;&gt;&lt;a href=&quot;#StableDiffusionで遊んでみたい！&quot; class=&quot;headerlink&quot; title=&quot;StableDiffusionで遊んでみたい！&quot;&gt;&lt;/a&gt;StableDiffusionで遊</summary>
      
    
    
    
    <category term="Windows" scheme="https://soto0201.github.io/categories/Windows/"/>
    
    
    <category term="Docker" scheme="https://soto0201.github.io/tags/Docker/"/>
    
    <category term="StableDiffusion" scheme="https://soto0201.github.io/tags/StableDiffusion/"/>
    
  </entry>
  
  <entry>
    <title>Chrome bookで遊ぶ</title>
    <link href="https://soto0201.github.io/Linux/4463e7ea43e3/"/>
    <id>https://soto0201.github.io/Linux/4463e7ea43e3/</id>
    <published>2023-12-04T13:50:01.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="おもちゃのChromebook"><a href="#おもちゃのChromebook" class="headerlink" title="おもちゃのChromebook"></a>おもちゃのChromebook</h1><p>本日は chrome book と戯れていました。<br>触っていたのはASUS Chromebook Detachable CM3になります。<br>昔ビックカメラで見つけた際におもちゃとして買ったものです。</p><p>買った理由としては、UbuntuやCentosなどの主要なLinuxはほとんど触っていましたが、<br>ChromeOSはまだ触っていないから色々弄り倒してみようというものでした。</p><h2 id="現在発生している問題"><a href="#現在発生している問題" class="headerlink" title="現在発生している問題"></a>現在発生している問題</h2><p>特定のアプリでローマ字↔日本語入力の切り替え(IMEみたいなやつ)が動作しなくなります。<br>原因はおそらくショートカットキーであるCtr+Spaがアプリ側に吸い取られているような感じがしています。</p><h2 id="開発環境の構築"><a href="#開発環境の構築" class="headerlink" title="開発環境の構築"></a>開発環境の構築</h2><p>Windowsの方でWEBで開くことができるVS CodeであるCode-ServerをDockerで立ち上げ、<br>Chrome-book上でアクセスすることで開発環境としています。<br>Docker-composeで立ち上げるようにして、<a href="https://github.com/linuxserver/docker-code-server">こちら</a>を参考にし、volumeとrestartを変更した。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  code-server:</span><br><span class="line">    image: lscr.io/linuxserver/code-server:latest</span><br><span class="line">    container_name: code-server</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=1000</span><br><span class="line">      - PGID=1000</span><br><span class="line">      - TZ=Etc/UTC</span><br><span class="line">      - DEFAULT_WORKSPACE=/config/workspace #optional</span><br><span class="line">    volumes:</span><br><span class="line">      - type: bind</span><br><span class="line">        source: /path/to/configdir</span><br><span class="line">        target: /config</span><br><span class="line">      - type: volume</span><br><span class="line">        source: homedir</span><br><span class="line">        target: /root</span><br><span class="line">    ports:</span><br><span class="line">      - 8443:8443</span><br><span class="line">    restart: always</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>composeファイルを編集している際にvolumeについてのお叱りを受けたので、こちらに記載しておく<br><a href="https://zenn.dev/sarisia/articles/0c1db052d09921">docker-compose の bind mount を1行で書くな</a></p><h2 id="このブログを編集できるように"><a href="#このブログを編集できるように" class="headerlink" title="このブログを編集できるように"></a>このブログを編集できるように</h2><p>最初はObsidianで編集できるようにしていましたが、上述の入力切替の問題に直面しています。<br>HackMDでこのブログを編集できるようにしました。<br>方法としては簡単で、<a href="https://zenn.dev/m_coder/articles/article-zenn-hackmd-collaboration">こちら</a>を参考にGitHubのリポジトリの中にあるmdファイルをHackMD編集や同期できるようにしました。<del>欲を言えばリポジトリのmdすべてをimportしてほしい</del><br>これでスマホの方からもブログの編集をできるようになった(yatta!)</p><h2 id="モバイルディスプレイの接続"><a href="#モバイルディスプレイの接続" class="headerlink" title="モバイルディスプレイの接続"></a>モバイルディスプレイの接続</h2><p>例に漏れずASUS MB16ACというモバイルディスプレイを接続して遊んでいます。<br>ここで、モバイルディスプレイとChromeBookのどちらも入力端子がUSB-TypeCしかないので、<br>ChromeBookにtypeCのアダプターを接続し、そこに充電器とディスプレイを接続します。<br>しかし、ディスプレイは一瞬ついたあと真っ暗になりました。</p><p>このモバイルディスプレイは給電と描画データをtypeC1本でやりとしています。<br>一瞬描画はなされているため、描画データは正常に送信できている。(真っ暗な状態でもChromeOS上でも認識されている)<br>そのため、給電の方に問題があると思い、45Wの純正電源からMacbook用の61Wの電源に入れ替えると、電力が足りたのか普通に動作するようになりました。<br>なお、この使い方で安全なのかは保証しません。</p><h2 id="不満に思うこと"><a href="#不満に思うこと" class="headerlink" title="不満に思うこと"></a>不満に思うこと</h2><p>普通に処理能力が足りていないというのは、値段に対して要求しすぎなので置いておきます。<br>Chromebookにディスプレイをつなげると画面拡張ができるが、壁紙を一つしか設定できません。<br>それでいて自由度が低く、片方は縦に、もう片方を横に使用すると壁紙が見切れたりしてしまう…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;おもちゃのChromebook&quot;&gt;&lt;a href=&quot;#おもちゃのChromebook&quot; class=&quot;headerlink&quot; title=&quot;おもちゃのChromebook&quot;&gt;&lt;/a&gt;おもちゃのChromebook&lt;/h1&gt;&lt;p&gt;本日は chrome book と戯</summary>
      
    
    
    
    <category term="Linux" scheme="https://soto0201.github.io/categories/Linux/"/>
    
    
    <category term="ChromeOS" scheme="https://soto0201.github.io/tags/ChromeOS/"/>
    
  </entry>
  
  <entry>
    <title>Refind Selfをクリアしてきました</title>
    <link href="https://soto0201.github.io/Game/Indie/05535e7a6169/"/>
    <id>https://soto0201.github.io/Game/Indie/05535e7a6169/</id>
    <published>2023-11-24T04:52:24.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今なにかと話題な性格診断ゲーム"><a href="#今なにかと話題な性格診断ゲーム" class="headerlink" title="今なにかと話題な性格診断ゲーム"></a>今なにかと話題な性格診断ゲーム</h1><p>なんと2023&#x2F;11&#x2F;14にリリースされたのでまだ10日しか経っていないのに結構プレイしている人がいるらしい。新作なのでネタばれはしない感じで書きたい。</p><p>制作はLizardryというところで日本人が一人で作成しているみたい。(純粋にすごい)<br>前作には「7 Days to End with You」があり、確かにストーリーの雰囲気や絵柄が似ている。そっちも積んでいるゲームを解消できたらやりたい。</p><h1 id="自分の結果について"><a href="#自分の結果について" class="headerlink" title="自分の結果について"></a>自分の結果について</h1><p>ゲームの大まかな内容としては、プレイ中にとった行動を基にプレイした後に25種類の性格に分類される。</p><p>というわけで、裁判官に分類されてしまった。(道徳が高い…まあ頭硬いのでそうっぽい…)<br>まあ、16Personalitysやそのほかの性格診断でもそれに類する分類されがちなので、よくできているなというお気持ち(確か16Personalityを基につくられていたはず)</p><p><img src="/images/2023/11/IMG_0931.png"></p><p>このゲームは周回することで、最初とは違う行動をとるのかどうかも含めて「秘められた性格」と「最も遠い性格」が判定される。私の場合はそれぞれ聖職者と道化師だった。これまたそれっぽいのがすごい。</p><p>周回と聞くとどうしても私は同じことを繰り返すようであまり気が乗らないが、このゲームでは「自分でもどのように行動が変化するか気になる」と「周回によって得られる自分の詳細な性格を知りたい」というのが周回のモチベーションに繋がった。<br>さらにこれが周回でのストーリー進行することのモチベにもなるので、考えられているゲームだと感じた。（作者すごい）</p><p>個人的には思うがままにプレイしたという感じなので、<br>どういう選択を取ればほかの性格に判別されるのかな疑問に思ったり…</p><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p>この記事の執筆時間よりHexoに画像を載せる時間の方が掛かっているという…w<br><a href="https://hexo.io/docs/asset-folders.html">公式</a>の画像の貼り方とにらめっこしていたけど、<a href="https://reon777.com/2020/04/15/hexo-image/">参考のブログ</a>を見たら一瞬でできた…<br><code>source/images</code>のディレクトリを作成したら良いだけだったけど、コンテキストどうなってるの…<br>と思ってたけどこれ一番上の<a href="https://hexo.io/docs/asset-folders.html#Global-Asset-Folder">Global Asset Folder</a>にしれっと書いてある…ずっと下のPost Asset Folder読んでた…</p><p>まあ結果obsidianの階層を丸ごと１つ上げることになったが、今後は画像を張りたくなったらすぐできるようになった。やったね。</p><h2 id="今後のゲームプレイ計画"><a href="#今後のゲームプレイ計画" class="headerlink" title="今後のゲームプレイ計画"></a>今後のゲームプレイ計画</h2><p>今はfactorioをクリアに向けて進めているが、かなり時間がかかるので平行でもう1ゲームやりたい。「ENDER LILIES」や「BABA IS YOU」もしくはオータムセール中の「ヘレの海底都市計画」をやりたいけど、記事がうまく書けるかが不安だ…(記事書くの難しい…)<br>明日は何しよう…CVEのRSS作りたい。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;今なにかと話題な性格診断ゲーム&quot;&gt;&lt;a href=&quot;#今なにかと話題な性格診断ゲーム&quot; class=&quot;headerlink&quot; title=&quot;今なにかと話題な性格診断ゲーム&quot;&gt;&lt;/a&gt;今なにかと話題な性格診断ゲーム&lt;/h1&gt;&lt;p&gt;なんと2023&amp;#x2F;11&amp;#x</summary>
      
    
    
    
    <category term="Game" scheme="https://soto0201.github.io/categories/Game/"/>
    
    <category term="Indie" scheme="https://soto0201.github.io/categories/Game/Indie/"/>
    
    
    <category term="Steam" scheme="https://soto0201.github.io/tags/Steam/"/>
    
    <category term="性格診断" scheme="https://soto0201.github.io/tags/%E6%80%A7%E6%A0%BC%E8%A8%BA%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>仮想ディスプレイをダミープラグがなしで実現する</title>
    <link href="https://soto0201.github.io/Windows/af7d52f49c29/"/>
    <id>https://soto0201.github.io/Windows/af7d52f49c29/</id>
    <published>2023-11-23T04:55:21.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仮想ディスプレイはダミープラグがなくても可能だった"><a href="#仮想ディスプレイはダミープラグがなくても可能だった" class="headerlink" title="仮想ディスプレイはダミープラグがなくても可能だった"></a>仮想ディスプレイはダミープラグがなくても可能だった</h1><p>基本的にSteamのゲームなどをする際には、スマホからSteam リンクを使用して寝転がってプレイしている。いつもモバイルディスプレイをオフにしてプレイしているが、<br>先日の件でWindows11にアップデートしたところ、ディスプレイをオンにしていないと画面の描画が行われなくなってしまった…</p><p>解決策として主流なのは、ディスプレイ用のダミープラグを刺すことなのだが、おそらくハードではなくソフトウェア的に仮想ディスプレイを作製することは可能だと思ったため調べたところほぼ望む結果が得られたことと、PCが操作不能になりかけたため記事を書く（あと日本語で書かれた記事が少なかったので）</p><h2 id="先に注意点を"><a href="#先に注意点を" class="headerlink" title="先に注意点を"></a>先に注意点を</h2><p>ドライバーをインストールすることで仮想のディスプレイを認識させることができるが、<br>私がインストールした際には仮想ディスプレイの方がメインディスプレイにせっていされてしまったため、操作が不能になってしまった。</p><p>解決方法として、steam リンクの操作にてメインディスプレイをモバイルモニターに設定することで事なきを得た。</p><h2 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h2><p><a href="https://github.com/ge9/IddSampleDriver">ここ</a>の通りにscoopでインストールするだけ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add nonportable</span><br><span class="line">scoop install iddsampledriver-ge9-np -g</span><br></pre></td></tr></table></figure><p>outionの最初の数字を変更することで仮想ディスプレイの数を増減できる。（お手軽～）<br>ただ、「デバイスマネージャー」→「ディスプレイアダプター」から「IDD sample Driver device」を一度無効にして有効にしないとオプションの反映はされないようだった。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>簡単にしかも無料で仮想ディスプレイを作製することができた。<br>インストール直後は操作を何も受け付けなくなって焦ったがsteam linkのおかげで一命をとりとめた。<br>しかもモバイルディスプレイの電源を切っても仮想ディスプレイが認識されたままになるので当初の目的であったディスプレイオフの状態でもsteam linkが使えるようになった。<br>この方法をvirtual desktopやxsoverlayでも使いたい。</p><h2 id="明日は"><a href="#明日は" class="headerlink" title="明日は"></a>明日は</h2><p>最近よく話(やyoutube)に出てくるRefind Selfを3周行って一通りクリアまでたどり着いたのでその感想を書いてみたい。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;仮想ディスプレイはダミープラグがなくても可能だった&quot;&gt;&lt;a href=&quot;#仮想ディスプレイはダミープラグがなくても可能だった&quot; class=&quot;headerlink&quot; title=&quot;仮想ディスプレイはダミープラグがなくても可能だった&quot;&gt;&lt;/a&gt;仮想ディスプレイはダミ</summary>
      
    
    
    
    <category term="Windows" scheme="https://soto0201.github.io/categories/Windows/"/>
    
    
    <category term="ディスプレイ" scheme="https://soto0201.github.io/tags/%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4/"/>
    
  </entry>
  
  <entry>
    <title>いつもManjaroのインストール時にやっていること</title>
    <link href="https://soto0201.github.io/Linux/db285fb82dbf/"/>
    <id>https://soto0201.github.io/Linux/db285fb82dbf/</id>
    <published>2023-11-22T12:06:51.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Manjaro-initialize"><a href="#Manjaro-initialize" class="headerlink" title="Manjaro initialize"></a>Manjaro initialize</h1><h2 id="まずはisoファイルのダウンロードから"><a href="#まずはisoファイルのダウンロードから" class="headerlink" title="まずはisoファイルのダウンロードから"></a>まずはisoファイルのダウンロードから</h2><ul><li><p>ダウンロードしたらsha1の検証を行うと杞憂しない<a href="https://wiki.manjaro.org/index.php/Check_a_Downloaded_ISO_Image_For_Errors">参考</a></p></li><li><p>USBインストーラーを作成する<br>  - いつも<a href="https://rufus.ie/ja/">rufus</a>を使っている</p></li></ul><h2 id="OSインストール時には"><a href="#OSインストール時には" class="headerlink" title="OSインストール時には"></a>OSインストール時には</h2><ul><li>日本語ではなくus_enに設定するようにしている</li><li>理由は、ホームディレクトリ以下が日本語で作成されて<code>デスクトップ</code>や<code>ダウンロード</code>といったディレクトリ名で作成されてしまう</li></ul><h2 id="ミラーサーバーの更新"><a href="#ミラーサーバーの更新" class="headerlink" title="ミラーサーバーの更新"></a>ミラーサーバーの更新</h2><ul><li><a href="https://turtlechan.hatenablog.com/entry/2019/08/25/194849">https://turtlechan.hatenablog.com/entry/2019/08/25/194849</a></li><li><code>pacman-mirrors -c Japan</code>の方が速くて便利</li></ul><h2 id="日本語が使えるように"><a href="#日本語が使えるように" class="headerlink" title="日本語が使えるように"></a>日本語が使えるように</h2><ul><li><a href="https://glutech.net/manjaro-5/">https://glutech.net/manjaro-5/</a></li><li>Mozcが日本語入力の設定</li><li>場合によっては再起動が必要</li></ul><h2 id="emacsキーバインドになるように"><a href="#emacsキーバインドになるように" class="headerlink" title="emacsキーバインドになるように"></a>emacsキーバインドになるように</h2><ul><li><a href="https://aobako.net/linux/manjaro/setup-memo/">https://aobako.net/linux/manjaro/setup-memo/</a></li><li>ついでにここで Caps Lock を Ctr に変える</li><li><a href="https://wiki.archlinux.org/title/GTK">wiki</a>を参考にGTKの設定をしたらKDEでもいけた<ul><li><code>~/.config/gtk-3.0/settings.ini</code>らへん</li></ul></li></ul><h2 id="vivaldiの設定"><a href="#vivaldiの設定" class="headerlink" title="vivaldiの設定"></a>vivaldiの設定</h2><ul><li>スクロールバーを自動的に隠すように設定する</li><li>ショートカットを直接いじってオプションを付け加えた<ul><li><code>--enable-features=OverlayScrollbar</code>を付けた感じ</li></ul></li><li>最近はChrome flags(試験運用)の方で設定できたりする</li></ul><h2 id="yokuakeの設定"><a href="#yokuakeの設定" class="headerlink" title="yokuakeの設定"></a>yokuakeの設定</h2><ul><li>iTermみたいなターミナル</li><li>設定からCmd+Spaceで呼び出されるように設定しがち</li></ul><h2 id="モバイルディスプレイが使えるように"><a href="#モバイルディスプレイが使えるように" class="headerlink" title="モバイルディスプレイが使えるように"></a>モバイルディスプレイが使えるように</h2><ul><li>ASUSのMB16ACというモバイルディスプレイ<ul><li>公式はUbuntu用のドライバーしか提供していない</li></ul></li><li>結論として以下の手順で正常に使えるようになった<ul><li>使っているカーネルに合った karnel header をpacmanでインストール</li><li><a href="https://wiki.archlinux.org/title/DisplayLink">archのdisplaylinkのwiki</a>を参照に設定を進める<ul><li><a href="https://superuser.com/questions/1478424/displaylink-on-manjaro">ここ</a>の内容に沿ってやる</li><li>そのあとbateにある接続数を設定するやつを適応する<ul><li>こんな感じ<code> [soto@aquamarine ~]$ cat /etc/modprobe.d/evdi.conf options evdi initial_device_count=1</code></li></ul></li></ul></li><li><code>xrander --listproviders</code>でつなげているモニターが検出されると勝利は目前</li><li>GUIのディスプレイの設定とかを駆使してなんやかんやしてモニターを使えるようにする</li></ul></li><li>描画が明らかに重くなっていたが、原因はディスプレイ設定でモニターがかぶっていたのが原因だった</li></ul><h2 id="まとめとそれ以外の設定について"><a href="#まとめとそれ以外の設定について" class="headerlink" title="まとめとそれ以外の設定について"></a>まとめとそれ以外の設定について</h2><p>Manjaroが優秀なのであまり初期設定が多くない<br>これが別のOSだと、Dockerをインストールするためにaptにリポジトリを追加するところから始まるが、Manjaroだと<code>pacman -S docker</code>とかでインストールできるので特筆して書くものではなくなる<br>あとはdotfileから各種設定を持ってきたり、TimeMacineとかでHDDにバックアップを取れるようにすると助けられる(実際数えきれないくらい助けられていた)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Manjaro-initialize&quot;&gt;&lt;a href=&quot;#Manjaro-initialize&quot; class=&quot;headerlink&quot; title=&quot;Manjaro initialize&quot;&gt;&lt;/a&gt;Manjaro initialize&lt;/h1&gt;&lt;h2 id=&quot;ま</summary>
      
    
    
    
    <category term="Linux" scheme="https://soto0201.github.io/categories/Linux/"/>
    
    
    <category term="Manjaro" scheme="https://soto0201.github.io/tags/Manjaro/"/>
    
  </entry>
  
  <entry>
    <title>プログラミング7年生、やっとタッチタイピングを習得する</title>
    <link href="https://soto0201.github.io/other/a1a586f81093/"/>
    <id>https://soto0201.github.io/other/a1a586f81093/</id>
    <published>2023-11-12T05:27:46.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近タイピングの練習をしている"><a href="#最近タイピングの練習をしている" class="headerlink" title="最近タイピングの練習をしている"></a>最近タイピングの練習をしている</h1><p>最近は毎日寿司打をプレイしている。目指すは秒速5key<br>速度としては、人差し指がカバーしている部分が遅いためまだ改善の余地がある。<br>高級コースで得になれるようにするのも目標の一つ。</p><p><img src="/images/2023/11/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202023-11-26%20002805.png"></p><p>あとミスが多いのでこれを減らすように改善したい。</p><h1 id="なぜ今までタイピングが遅いままだったのか"><a href="#なぜ今までタイピングが遅いままだったのか" class="headerlink" title="なぜ今までタイピングが遅いままだったのか"></a>なぜ今までタイピングが遅いままだったのか</h1><p>個人的にタイピングが速い人はプログラムを思うがままに書くことができるので、きれいなコードではないという偏見があった。（頭いいひとが字が汚いと同じように。それも偏見だけども…）<br>ただ、自分はタイピングも遅ければコードもそう綺麗なものでもないので、<br>この機会にタイピングくらいは速くしておくかと思い立った。</p><p>現況としては、タッチタイピングができるようになったことと、上にもあるように<br>タッチタイピングで秒間4keyほど出せるようになった。</p><p>タッチタイピングができるようになって良かったことがあり、明らかに姿勢が良くなったというものがある。これまではキーを目視していたため、かなり猫背になっていたのが改善され、長時間PCを触っていても腰が疲れなくなった。</p><p>こんなことなら早めにタッチタイピング習得して置いたらよかったのだ…</p><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><p>今日は技術の話をかきたかったが、学生時代にお世話になっていた研究室のカレーパーティーに呼ばれたのでそちらに行っていました。(その前は謎に家が停電したため、サーバーの復旧のため電気が戻るまで待機していた)</p><p>明日こそは…！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最近タイピングの練習をしている&quot;&gt;&lt;a href=&quot;#最近タイピングの練習をしている&quot; class=&quot;headerlink&quot; title=&quot;最近タイピングの練習をしている&quot;&gt;&lt;/a&gt;最近タイピングの練習をしている&lt;/h1&gt;&lt;p&gt;最近は毎日寿司打をプレイしている。目</summary>
      
    
    
    
    <category term="other" scheme="https://soto0201.github.io/categories/other/"/>
    
    
    <category term="タイピング" scheme="https://soto0201.github.io/tags/%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>技術以外の話もブログに書きたい</title>
    <link href="https://soto0201.github.io/other/73a73f59e008/"/>
    <id>https://soto0201.github.io/other/73a73f59e008/</id>
    <published>2023-11-11T14:14:47.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="そういえば生活の話もブログに書きたいと思っていたことを思い出した"><a href="#そういえば生活の話もブログに書きたいと思っていたことを思い出した" class="headerlink" title="そういえば生活の話もブログに書きたいと思っていたことを思い出した"></a>そういえば生活の話もブログに書きたいと思っていたことを思い出した</h1><p>ブログはできれば毎日書きたいのですが、技術の事だけに絞ると中身のない技術ブログになることを危惧しています。(例：「ＯＯができない→こうしてみましたができませんでした！→知っている方がいれば教えてください」で更新停止しているブログ)</p><p>自分が仕事をしている際にそういった記事を見たことがたまにあった(しかもそういったものに限って検索の上位にあったりする…)ため、ヘイトが向かっているかもしれません…。ですが質問するならそれ相応のサイトがあると思うのでそこで聞いた方が解決するし、ヘイトも向かわないと思います。</p><p>加えて、ブログは日が空くと更新しなくなるものだと思う(実際これまでそうだった)ため、今後は生活や気になっていること、日頃やっているゲームについても書いていきます。</p><h2 id="今後のブログの予定"><a href="#今後のブログの予定" class="headerlink" title="今後のブログの予定"></a>今後のブログの予定</h2><p>とはいえ連続して技術以外の記事なのもあれなので、明日は技術の記事を書きたいですね。</p><p>今のところ書きたい記事は</p><ul><li>Windowsでの開発環境について</li><li>作りたいサービスの開発記事</li><li>東京旅行について</li><li>やっているゲームやソシャゲについて(factrioとアークナイツかな…)</li></ul><p>こんな感じになっているので、交互に記事ができるはず…<br>ひとまず明日の自分が記事を書いてくれることをお祈りしています。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;そういえば生活の話もブログに書きたいと思っていたことを思い出した&quot;&gt;&lt;a href=&quot;#そういえば生活の話もブログに書きたいと思っていたことを思い出した&quot; class=&quot;headerlink&quot; title=&quot;そういえば生活の話もブログに書きたいと思っていたことを思</summary>
      
    
    
    
    <category term="other" scheme="https://soto0201.github.io/categories/other/"/>
    
    
    <category term="生活" scheme="https://soto0201.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>デスクトップPCを飛行機で輸送することは可能だった</title>
    <link href="https://soto0201.github.io/Linux/0a72082d9763/"/>
    <id>https://soto0201.github.io/Linux/0a72082d9763/</id>
    <published>2023-11-08T11:48:50.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="機内持ち込みでデスクトップPCを輸送した話"><a href="#機内持ち込みでデスクトップPCを輸送した話" class="headerlink" title="機内持ち込みでデスクトップPCを輸送した話"></a>機内持ち込みでデスクトップPCを輸送した話</h1><p>家に使っていないPCがあるため、それを東京にいる友達に貸すことにした。<br>ヤマトで郵送するのが正しいかと思われるが、東京に旅行に行くのでその際にスーツケースに格納して持っていくことにした。</p><h2 id="持っていくPCパーツについて"><a href="#持っていくPCパーツについて" class="headerlink" title="持っていくPCパーツについて"></a>持っていくPCパーツについて</h2><p>さすがにPCケースは持っていけないので、それはおいていく。<br>そのため、持っていくパーツは以下のようになった</p><ul><li>CPU</li><li>グラボ</li><li>メモリ</li><li>マザボ</li><li>M.2 SSD</li><li>電源</li></ul><p>上半分は手荷物として輸送して、下3つはスーツケースの中に入れた。<br>CPUにはリテールクーラーが付属しているのと、<br>M.2はマザボに刺したままにしておいた。</p><p>また、スーツケースに入れる際は固定＆クッション材として着替えの衣服やタオルを間に挟むようにしていた。</p><p>グリスは現地で購入した</p><h2 id="預け手荷物の検査"><a href="#預け手荷物の検査" class="headerlink" title="預け手荷物の検査"></a>預け手荷物の検査</h2><p>ATX電源が検査に引っかからないか心配だったが、なんとかなった。<br>ほかの手荷物も同様なんとかなった。</p><p>ただ、スーツケースは10kgを超え、手荷物も重くなっていた…</p><h2 id="実際に輸送してみてわかった忘れもの"><a href="#実際に輸送してみてわかった忘れもの" class="headerlink" title="実際に輸送してみてわかった忘れもの"></a>実際に輸送してみてわかった忘れもの</h2><p>まだ大学生気分が抜けていないようで、有線LANが床から生えていると思っていたため忘れてしまった。<br>あと、マウスは有線の方が良かったのと、HDMIケーブルもなかった…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;機内持ち込みでデスクトップPCを輸送した話&quot;&gt;&lt;a href=&quot;#機内持ち込みでデスクトップPCを輸送した話&quot; class=&quot;headerlink&quot; title=&quot;機内持ち込みでデスクトップPCを輸送した話&quot;&gt;&lt;/a&gt;機内持ち込みでデスクトップPCを輸送した話&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="https://soto0201.github.io/categories/Linux/"/>
    
    
    <category term="自作PC" scheme="https://soto0201.github.io/tags/%E8%87%AA%E4%BD%9CPC/"/>
    
  </entry>
  
  <entry>
    <title>Dockerで立ちあげたコンテナで開発する</title>
    <link href="https://soto0201.github.io/Windows/8c034642e0a6/"/>
    <id>https://soto0201.github.io/Windows/8c034642e0a6/</id>
    <published>2023-10-22T11:46:25.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windowsでの開発にManjaro-Linuxを使いたい"><a href="#Windowsでの開発にManjaro-Linuxを使いたい" class="headerlink" title="Windowsでの開発にManjaro Linuxを使いたい"></a>Windowsでの開発にManjaro Linuxを使いたい</h1><p>Windowsを初期化したため、開発環境を構築したいと思っていた。今まではWSL2の機能を使用してManjaro Linuxを使用していたが、今回はDockerでManjaro Linuxを開発環境にしてみる。</p><h2 id="Dockerのインストール"><a href="#Dockerのインストール" class="headerlink" title="Dockerのインストール"></a>Dockerのインストール</h2><p>LinuxカーネルにはWSL2を使用することが推奨されているため、まずはそれをインストールする。(個人的な理由でHyper-Vはあまり使わない)</p><h3 id="WSL2のインストール"><a href="#WSL2のインストール" class="headerlink" title="WSL2のインストール"></a>WSL2のインストール</h3><p><a href="https://learn.microsoft.com/ja-jp/windows/wsl/install">Microsoft 公式</a>を見つつ設定をするといい。<br>WSL2のインストールが完了したら、<a href="https://www.docker.com/get-started/">Docker 公式</a>の用意しているセットアップツールに従えばインストールできる。</p><h3 id="WSLのおすすめの設定"><a href="#WSLのおすすめの設定" class="headerlink" title="WSLのおすすめの設定"></a>WSLのおすすめの設定</h3><p>実は2023年10月現在、デフォルトの設定ではWSLが一度確保したメモリ空間は自動で解放されない(そんなことが許されていいのか？？？)<br>しかし、最近になって使用しなくなったメモリを徐々に開放する設定が追加された。<br><a href="https://www.publickey1.jp/blog/23/windows_subsystem_for_linuxwsllanwsl.html">こちら</a>を参考に設定を行った。</p><h2 id="Docker-Image-を作成する"><a href="#Docker-Image-を作成する" class="headerlink" title="Docker Image を作成する"></a>Docker Image を作成する</h2><p>どうやらbase imageはmanjarolinux&#x2F;baseという名前であるため、<br>これに必要なものを追加していく。以下のような形になった</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> manjarolinux/base</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pacman-mirrors -c Japan</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pacman -Syyu --noconfirm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pacman -S vim git tmux openssh zsh make wget --noconfirm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexoの環境用</span></span><br><span class="line"><span class="comment"># RUN pacman -S nodejs npm --noconfirm</span></span><br><span class="line"><span class="comment"># RUN npm install hexo-cli -g</span></span><br></pre></td></tr></table></figure><p>前回の記事のために使用したhexoの環境用にnodeとnpmをインストールしている。<br>使用後はその部分を削除するかコメントアウトすることで環境を汚さないようにできる。</p><h2 id="Alacrittyのインストール"><a href="#Alacrittyのインストール" class="headerlink" title="Alacrittyのインストール"></a>Alacrittyのインストール</h2><p>Windowsでターミナルを使う際はいつもAlacrittyを使用している。<br>これはrust製で、ターミナル以外の機能が何も搭載されていない。<br>機能が全くないことに不便だと思われるかもしれないが、結局tmuxやpowerlineを使うのでターミナルに機能があっても使用しない。その分高速に動いてくれた方が都合がよい。</p><p>Windowsの場合はscoopでインストールすることを個人的にはおすすめしている。(あとあと便利になる)インストールはいつも<a href="https://www.asobou.co.jp/blog/web/alacritty">このブログ</a>にお世話になっている</p><h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><p>以下のようにAlacrittyの設定を記述することとなった(コマンドが長い…)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shell:</span></span><br><span class="line">  <span class="attr">program:</span> <span class="string">/Program</span> <span class="string">Files/Docker/Docker/resources/bin/docker.exe</span> <span class="string">run</span> <span class="string">-it</span> <span class="string">-v</span> <span class="string">homedir:/root</span> <span class="string">--rm</span> <span class="string">arch</span> <span class="string">/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="attr">window:</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.9</span></span><br></pre></td></tr></table></figure><p>必要な際はdockerコマンドに対して<code>-p</code>オプションなどを使用してポートフォワードしたりする。</p><h3 id="オプション"><a href="#オプション" class="headerlink" title="オプション"></a>オプション</h3><p>Docker Volumeを使用することでコンテナ内で作成したものを永続化できる。<br>今回の場合はホームディレクトリをマウントしている。これによりほかのディストリビューションを使用したくなった場合でも、同じボリュームをマウントすることによりホームディレクトリを共有することができる。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これでWindowsでlinuxの環境を使用できるようになった。<br>これまではWSL2でmanjaroを使用していたが、<br>少し面倒であることと、ほかのディストリビューション(Ubuntuなど)を使用したくなった際に、設定を最初から行う必要がある。</p><p>今回の Docker コンテナの環境なら Docker Volumeを付け替えることで同じホームディレクトリを使用することができ、毎度コンテナを作成することで環境の再現性を保つことができる。</p><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p>今回の記事を執筆中、ふと思い立ったため各Linuxディストリビューションの Docker Image のサイズを調べてみた。結果は下表のようになった。</p><table><thead><tr><th>ディストリビューション</th><th>元のサイズ</th></tr></thead><tbody><tr><td>Manjaro</td><td>797 MB</td></tr><tr><td>Arch</td><td>433 MB</td></tr><tr><td>Ubuntu</td><td>77 MB</td></tr></tbody></table><p>元のサイズはUbuntuが小さいが、これは必要なパッケージがなにもインストールされていない状態なのであって、node.jsをインストールすると同じくらいのサイズになっていた。</p><h2 id="さらに余談"><a href="#さらに余談" class="headerlink" title="さらに余談"></a>さらに余談</h2><p>また、Windows10でAlacrittyを使おうとすると、画面透過が効かず、さらには日本語表示が横にずれるバグがあった。解決しようと試行錯誤してみたがどれもうまくいかず、Windows11にアップデートしたところ改善した。</p><p>どうにも元凶はpowershellの文字コードにあるらしく、<code>docker run -it ... /bin/zsh</code>にてコンテナにattachした際にShift-JISに強制変更されていた。<br>これによりコンテナ側はUTF-8だが、表示側はShift-JISだと思って描画をするために齟齬が生まれているようだった…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windowsでの開発にManjaro-Linuxを使いたい&quot;&gt;&lt;a href=&quot;#Windowsでの開発にManjaro-Linuxを使いたい&quot; class=&quot;headerlink&quot; title=&quot;Windowsでの開発にManjaro Linuxを使いたい&quot;&gt;</summary>
      
    
    
    
    <category term="Windows" scheme="https://soto0201.github.io/categories/Windows/"/>
    
    
    <category term="WSL" scheme="https://soto0201.github.io/tags/WSL/"/>
    
    <category term="Manjaro" scheme="https://soto0201.github.io/tags/Manjaro/"/>
    
    <category term="Alacritty" scheme="https://soto0201.github.io/tags/Alacritty/"/>
    
    <category term="Docker" scheme="https://soto0201.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ブログをHexoに書くことにした</title>
    <link href="https://soto0201.github.io/other/acab19ce051a/"/>
    <id>https://soto0201.github.io/other/acab19ce051a/</id>
    <published>2023-10-21T11:46:25.000Z</published>
    <updated>2024-02-28T12:30:21.785Z</updated>
    
    <content type="html"><![CDATA[<p>ブログを書きたいと思うことは多いが、はてなブログなどのサービスは自由度が低い。webページまで書きに行くのが手間がかかる。加えて手元で書いたものをコピペするのは冗長だと感じてしまう。</p><p>別の方法として、hugoや以前使用していたhexoなどの静的サイトジェネレータを github pages にデプロイする方法がある。しかしこれではファイルに記事の内容を書き出してコマンドを実行して github pages にデプロイする必要がある。</p><h1 id="obsidian-gitを使用したHexoの自動デプロイ"><a href="#obsidian-gitを使用したHexoの自動デプロイ" class="headerlink" title="obsidian-gitを使用したHexoの自動デプロイ"></a>obsidian-gitを使用したHexoの自動デプロイ</h1><p>そこで、日頃から使用している obsidian の git 同期の機能とgithub actions の機能を組み合わせることで自動デプロイされるようにする。</p><h2 id="hexoの環境構築"><a href="#hexoの環境構築" class="headerlink" title="hexoの環境構築"></a>hexoの環境構築</h2><p>手始めに<a href="https://hexo.io/index.html">Hexo公式</a>の通りに npm からインストールし、流れに沿って<code>hexo server</code> で <a href="http://localhost:4000/">localhost:4000</a> にてwebページが表示されるようにする。</p><h2 id="Github-Pages-にデプロイしてみる"><a href="#Github-Pages-にデプロイしてみる" class="headerlink" title="Github Pages にデプロイしてみる"></a>Github Pages にデプロイしてみる</h2><p>ローカル環境で<code>hexo clean &amp;&amp; hexo deploy</code>などのコマンドにて、そもそも手動でデプロイができることを確認すると安心。<br>方法は<a href="https://hexo.io/index.html">Hexo公式</a>や<a href="https://qiita.com/genie-oh/items/8c19668c7dae6b4a153e">参考にした記事</a>に詳しく記載されているため、そちらを参照してほしい。</p><h2 id="Github-Actions-にて自動デプロイするようにする"><a href="#Github-Actions-にて自動デプロイするようにする" class="headerlink" title="Github Actions にて自動デプロイするようにする"></a>Github Actions にて自動デプロイするようにする</h2><p><a href="https://hexo.io/docs/github-pages.html">Hexo公式のGithub Pagesの設定</a>に設定の中身も記載してある。<br>Actionsを設定する際の注意点として、以下がある。</p><ul><li>github Actionsの設定を変更する必要がある<ul><li>4の In your GitHub repo’s setting, navigate to <strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>. Change the source to <strong>GitHub Actions</strong> and save の指示</li></ul></li><li>github Actions の permission の設定をしないといけない<ul><li>read &#x2F; write の権限を与える</li><li><a href="https://zenn.dev/osawa_koki/articles/a63b96a2707a8f#acions%E8%A8%AD%E5%AE%9A%E3%81%8B%E3%82%89%E6%A8%A9%E9%99%90%E3%82%92%E4%B8%8E%E3%81%88%E3%82%8B">ここの記事</a>を参考にしました</li></ul></li></ul><p>あとはpushをして Actions が設定できることと、Pagesにデプロイされていることを確認する。</p><h2 id="オプション-テーマの設定"><a href="#オプション-テーマの設定" class="headerlink" title="(オプション)テーマの設定"></a>(オプション)テーマの設定</h2><p>hexoの公式がテーマ一覧を提供してくれている。<br>(リンク切れになっているページが多いので、その際は手元で動かして確認するしかない)</p><p>今回は良さそうと思ったviviaを使用している。<br>決め手はカテゴリの階層構造がちゃんとしていることと、UIが整っていると感じたため。</p><h2 id="Obsidianの設定"><a href="#Obsidianの設定" class="headerlink" title="Obsidianの設定"></a>Obsidianの設定</h2><p>これはHexoのリポジトリのsorce&#x2F;_postをObsidianのvaltとして登録する。<br>その後 community plugin から Obsidian Git を追加し、commitやpushのタイミングを設定するだけである。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>この方法で、</p><ol><li>Obsidianに記事の内容を書く</li><li>Git プラグインにより自動で Githubにpushされる</li><li>pushされたことによりGitHub Actionが実行される</li><li>GitHub Pagesに書いた記事が追加される</li></ol><p>という流れを作ることができた。<br>そしてブログの記者は1のみをするだけでよい(やったね)</p><p>書きかけの途中の記事が自動pushにより公開されるというのが嫌な場合は、<a href="https://hexo.io/docs/front-matter.html">hexoのfront-matter</a>に<code>published</code>という設定がある。これがfalseの際はその記事は公開されない。そのため記事の記述が終わった際にtrueに直すと公開されるようになる。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://hexo.io/">Hexoの公式</a></li><li><a href="https://qiita.com/genie-oh/items/8c19668c7dae6b4a153e">Hexoの使い方とデプロイ方法について</a><ul><li>とても丁寧に説明されている</li></ul></li><li><a href="https://zenn.dev/ayumukob/articles/3b034fcb6874d2">Obsidian Gitについて詳しく解説している記事</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ブログを書きたいと思うことは多いが、はてなブログなどのサービスは自由度が低い。webページまで書きに行くのが手間がかかる。加えて手元で書いたものをコピペするのは冗長だと感じてしまう。&lt;/p&gt;
&lt;p&gt;別の方法として、hugoや以前使用していたhexoなどの静的サイトジェネレー</summary>
      
    
    
    
    <category term="other" scheme="https://soto0201.github.io/categories/other/"/>
    
    
    <category term="HelloWorld" scheme="https://soto0201.github.io/tags/HelloWorld/"/>
    
    <category term="GitHubActions" scheme="https://soto0201.github.io/tags/GitHubActions/"/>
    
    <category term="Obsidian" scheme="https://soto0201.github.io/tags/Obsidian/"/>
    
    <category term="Hexo" scheme="https://soto0201.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
